{"version":3,"sources":["components/Wrapper/Wrapper.js","components/Card/Card.js","components/Header/Header.js","components/Board/Board.js","App.js","serviceWorker.js","index.js"],"names":["Wrapper","props","className","children","Card","style","backgroundImage","src","alt","handleClick","name","Header","id","score","Board","state","numbers","numberBlocks","resetGame","setState","handleCorrect","newCards","shuffleArray","console","log","handleWrong","guessedCorrect","map","number","newPic","clicked","i","length","j","Math","floor","random","this","key","image","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"wiEAOeA,MAJf,SAAiBC,GACf,OAAO,yBAAKC,UAAU,WAAWD,EAAME,W,yDCY1BC,G,MAZF,SAAAH,GAAK,aAEd,4BACAC,UAAU,WACVG,MAAO,CAACC,gBAAgB,OAAD,OAAQL,EAAMM,IAAd,MACvBC,IAAKP,EAAMO,KAHX,0BAIU,SAJV,yBAKS,kBAAMP,EAAMQ,YAAYR,EAAMS,SALvC,MCSWC,G,MAXA,SAAAV,GAAK,OAEhB,yBAAKW,GAAG,UACJ,yBAAKA,GAAG,SAAR,mBACA,yBAAKA,GAAG,cAAR,qCACA,yBAAKA,GAAG,YAAR,UAA2BX,EAAMY,UCqG1BC,E,4MAlGXC,MAAQ,CAELC,QAASC,EACRJ,MAAO,G,EAKXK,UAAY,WACR,EAAKC,SAAS,CACVN,MAAO,EACPG,QAASC,K,EAIjBG,cAAgB,SAAAC,GACZ,EAAKF,SAAS,CACXH,QAAS,EAAKM,aAAaD,GAC1BR,MAAO,EAAKE,MAAMF,MAAO,IAGJ,KAArB,EAAKE,MAAMF,QACX,EAAKK,YACLK,QAAQC,IAAI,c,EAKpBC,YAAc,WACV,EAAKP,a,EAGTT,YAAc,SAAAC,GACV,IAAIgB,GAAiB,EACfL,EAAW,EAAKN,MAAMC,QAAQW,KAAI,SAAAC,GACrC,IAAMC,EAAM,eAAOD,GASnB,OARIC,EAAOnB,OAASA,IACZmB,EAAOC,UACPP,QAAQC,IAAI,+BACZK,EAAOC,SAAU,EACjBJ,GAAiB,IAIlBG,KAEXN,QAAQC,IAAI,oBAAqBE,GAEjCA,EAAiB,EAAKN,cAAcC,GAAY,EAAKI,YAAYJ,I,EAGpEC,aAAe,SAAAN,GACX,IAAK,IAAIe,EAAIf,EAAQgB,OAAS,EAAGD,EAAI,EAAGA,IAAK,CACzC,IAAME,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IADD,EAEd,CAACf,EAAQiB,GAAIjB,EAAQe,IAA/Cf,EAAQe,GAFgC,KAE5Bf,EAAQiB,GAFoB,KAI7C,OAAQjB,G,uDAGF,IAAD,OAEL,OAEI,6BACI,kBAAC,EAAD,MACA,yBAAKd,UAAU,gBACX,yBAAKA,UAAU,SACdmC,KAAKtB,MAAMC,QAAQW,KAAI,SAAAC,GACpB,OAEI,kBAAC,EAAD,CACAlB,KAAMkB,EAAOlB,KACb4B,IAAKV,EAAOhB,GACZH,YAAa,EAAKA,YAClBF,IAAKqB,EAAOW,MACZ/B,IAAKoB,EAAOlB,iB,GA9EpB8B,aCOLC,MATf,WACE,OAEE,kBAAC,EAAD,KACI,kBAAC,EAAD,QCCYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpC,QAAQoC,MAAMA,EAAMC,c","file":"static/js/main.2f3d4cab.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Wrapper.css\";\r\n\r\nfunction Wrapper(props) {\r\n  return <div className=\"wrapper\">{props.children}</div>;\r\n}\r\n\r\nexport default Wrapper;","import React from 'react';\r\nimport \"./Card.css\";\r\n\r\n\r\nconst Card = props => (\r\n\r\n    <div\r\n    className=\"allCards\"\r\n    style={{backgroundImage:`url(${props.src})`}}\r\n    alt={props.alt}\r\n    className=\"block\"\r\n    onClick={() => props.handleClick(props.name)}>\r\n</div>\r\n)\r\n\r\n\r\nexport default Card ","import React from 'react';\r\nimport \"./Header.css\";\r\n\r\n\r\nconst Header = props => (\r\n\r\n    <div id=\"header\">\r\n        <div id=\"title\">Do You Remember</div>\r\n        <div id=\"directions\">Don't click the same image twice!</div>\r\n        <div id=\"scoreDiv\">Score: {props.score}</div>\r\n    </div>\r\n);\r\n\r\n\r\n\r\nexport default Header ","import React, {Component} from \"react\";\r\nimport \"./Board.css\";\r\nimport numberBlocks from \"../../numbers.json\";\r\nimport Card from \"../Card\";\r\nimport Header from \"../Header/Header\";\r\n\r\n\r\n\r\n\r\nclass Board extends Component {\r\n\r\n\r\n    state = {\r\n\r\n       numbers: numberBlocks ,\r\n        score: 0\r\n\r\n\r\n    }\r\n\r\n    resetGame = () => {\r\n        this.setState({\r\n            score: 0,\r\n            numbers: numberBlocks\r\n        })      \r\n    }\r\n\r\n    handleCorrect = newCards => {\r\n        this.setState({\r\n           numbers: this.shuffleArray(newCards), \r\n            score: this.state.score +1,\r\n        });\r\n\r\n        if (this.state.score === 16) {\r\n            this.resetGame();\r\n            console.log(\"You won!\");\r\n        }\r\n\r\n    };\r\n\r\n    handleWrong = () => {\r\n        this.resetGame();\r\n    };\r\n\r\n    handleClick = name => {\r\n        let guessedCorrect = false;\r\n        const newCards = this.state.numbers.map(number => {\r\n           const newPic = {...number};\r\n           if (newPic.name === name) {\r\n               if(!newPic.clicked){\r\n                   console.log(\"Already guessed------------\");\r\n                   newPic.clicked = true;\r\n                   guessedCorrect = true;\r\n               }\r\n               \r\n           }\r\n           return newPic;\r\n       })       \r\n       console.log(\"GUESSED CORRECT: \", guessedCorrect)\r\n       //if guessed correct is true handleCorrect, else handle as wrong\r\n       guessedCorrect ? this.handleCorrect(newCards) : this.handleWrong(newCards)\r\n    };\r\n\r\n    shuffleArray = numbers => {\r\n        for (let i = numbers.length - 1; i > 0; i--) {\r\n            const j = Math.floor(Math.random() * (i + 1));\r\n            [numbers[i], numbers[j]] = [numbers[j], numbers[i]];\r\n        }\r\n        return (numbers);\r\n    };\r\n\r\n    render() {\r\n\r\n        return(\r\n\r\n            <div>\r\n                <Header />\r\n                <div className=\"boardWrapper\">\r\n                    <div className=\"board\">\r\n                    {this.state.numbers.map(number => {\r\n                        return (\r\n\r\n                            <Card\r\n                            name={number.name}\r\n                            key={number.id}\r\n                            handleClick={this.handleClick}\r\n                            src={number.image}\r\n                            alt={number.name}\r\n                        />)\r\n\r\n\r\n\r\n\r\n\r\n\r\n                    })}\r\n\r\n                    </div>\r\n                </div>\r\n            </div>       \r\n\r\n\r\n        )\r\n\r\n\r\n\r\n    }\r\n\r\n}\r\n\r\nexport default Board","import React from 'react';\r\n// import Card from \"./components/Card\"\r\nimport Wrapper from \"./components/Wrapper\"\r\nimport Board from \"./components/Board\"\r\n\r\n\r\n\r\nfunction App() {\r\n  return (\r\n\r\n    <Wrapper>\r\n        <Board />\r\n    </Wrapper>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}