{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Jared\\\\UCB-VIRT-FSF-PT-01-2020-U-LOL\\\\Do_You_Remember\\\\src\\\\components\\\\Board\\\\Board.js\";\nimport React, { Component } from \"react\";\nimport \"./Board.css\";\nimport numberBlocks from \"../../numbers.json\";\nimport Card from \"../Card\";\nimport Header from \"../Header/Header\";\n\nclass Board extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      numbers: numberBlocks,\n      score: 0\n    };\n\n    this.resetGame = () => {\n      this.setState({\n        score: 0,\n        numbers: numberBlocks\n      });\n    };\n\n    this.handleCorrect = newCards => {\n      this.setState({\n        numbers: this.shuffleArray(newCards),\n        score: this.state.score + 1\n      });\n\n      if (this.state.score === 16) {\n        this.resetGame();\n        console.log(\"You won!\");\n      }\n    };\n\n    this.handleWrong = () => {\n      this.resetGame();\n    };\n\n    this.handleClick = name => {\n      let guessedCorrect = false;\n      const newCards = this.state.numbers.map(number => {\n        const newPic = { ...number\n        };\n\n        if (newPic.name === name) {\n          if (!newPic.clicked) {\n            console.log(\"Already guessed------------\");\n            newPic.clicked = true;\n            guessedCorrect = true;\n          }\n        }\n\n        return newPic;\n      });\n      console.log(\"GUESSED CORRECT: \", guessedCorrect); //if guessed correct is true handleCorrect, else handle as wrong\n\n      guessedCorrect ? this.handleCorrect(newCards) : this.handleWrong(newCards);\n    };\n\n    this.shuffleArray = numbers => {\n      for (let i = numbers.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [numbers[i], numbers[j]] = [numbers[j], numbers[i]];\n      }\n\n      return numbers;\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"boardWrapper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"board\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 21\n      }\n    }, this.state.numbers.map(number => {\n      return /*#__PURE__*/React.createElement(Card, {\n        name: number.name,\n        key: number.id,\n        handleClick: this.handleClick,\n        src: number.image,\n        alt: number.name,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 29\n        }\n      });\n    }))));\n  }\n\n}\n\nexport default Board;","map":{"version":3,"sources":["C:/Users/Jared/UCB-VIRT-FSF-PT-01-2020-U-LOL/Do_You_Remember/src/components/Board/Board.js"],"names":["React","Component","numberBlocks","Card","Header","Board","state","numbers","score","resetGame","setState","handleCorrect","newCards","shuffleArray","console","log","handleWrong","handleClick","name","guessedCorrect","map","number","newPic","clicked","i","length","j","Math","floor","random","render","id","image"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\";\r\nimport \"./Board.css\";\r\nimport numberBlocks from \"../../numbers.json\";\r\nimport Card from \"../Card\";\r\nimport Header from \"../Header/Header\";\r\n\r\n\r\n\r\n\r\nclass Board extends Component {\r\n\r\n\r\n    state = {\r\n\r\n       numbers: numberBlocks ,\r\n        score: 0\r\n\r\n\r\n    }\r\n\r\n    resetGame = () => {\r\n        this.setState({\r\n            score: 0,\r\n            numbers: numberBlocks\r\n        })      \r\n    }\r\n\r\n    handleCorrect = newCards => {\r\n        this.setState({\r\n           numbers: this.shuffleArray(newCards), \r\n            score: this.state.score +1,\r\n        });\r\n\r\n        if (this.state.score === 16) {\r\n            this.resetGame();\r\n            console.log(\"You won!\");\r\n        }\r\n\r\n    };\r\n\r\n    handleWrong = () => {\r\n        this.resetGame();\r\n    };\r\n\r\n    handleClick = name => {\r\n        let guessedCorrect = false;\r\n        const newCards = this.state.numbers.map(number => {\r\n           const newPic = {...number};\r\n           if (newPic.name === name) {\r\n               if(!newPic.clicked){\r\n                   console.log(\"Already guessed------------\");\r\n                   newPic.clicked = true;\r\n                   guessedCorrect = true;\r\n               }\r\n               \r\n           }\r\n           return newPic;\r\n       })       \r\n       console.log(\"GUESSED CORRECT: \", guessedCorrect)\r\n       //if guessed correct is true handleCorrect, else handle as wrong\r\n       guessedCorrect ? this.handleCorrect(newCards) : this.handleWrong(newCards)\r\n    };\r\n\r\n    shuffleArray = numbers => {\r\n        for (let i = numbers.length - 1; i > 0; i--) {\r\n            const j = Math.floor(Math.random() * (i + 1));\r\n            [numbers[i], numbers[j]] = [numbers[j], numbers[i]];\r\n        }\r\n        return (numbers);\r\n    };\r\n\r\n    render() {\r\n\r\n        return(\r\n\r\n            <div>\r\n                <Header />\r\n                <div className=\"boardWrapper\">\r\n                    <div className=\"board\">\r\n                    {this.state.numbers.map(number => {\r\n                        return (\r\n\r\n                            <Card\r\n                            name={number.name}\r\n                            key={number.id}\r\n                            handleClick={this.handleClick}\r\n                            src={number.image}\r\n                            alt={number.name}\r\n                        />)\r\n\r\n\r\n\r\n\r\n\r\n\r\n                    })}\r\n\r\n                    </div>\r\n                </div>\r\n            </div>       \r\n\r\n\r\n        )\r\n\r\n\r\n\r\n    }\r\n\r\n}\r\n\r\nexport default Board"]},"metadata":{},"sourceType":"module"}